{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/dict.js","webpack:///./js/game.js","webpack:///./js/main.js","webpack:///./js/monster.js","webpack:///./js/mylib.js","webpack:///./js/player.js","webpack:///./js/spell.js","webpack:///./js/task.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2EAA2E,8BAA8B;AACzG,mDAAmD,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D,uBAAuB;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qE;;;;;;;;;;;;;;ACzFA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;ACdA;AACoB;;AAEpwBAAwB,4BAA4B;AACpD,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wE;;;;;;;;;;;;ACpLA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sE;;;;;;;;;;;;AC3EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA,uE;;;;;;;;;;;;;;;AC1EA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sE;;;;;;;;;;;;;;;ACxDA;AACgG;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA,qE","file":"boundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/main.js\");\n","export const dictMonster = {\n    \"headsIdle\" : ['spriteMonsterHeadIdle_first', 'spriteMonsterHeadIdle_second','spriteMonsterHeadIdle_third'],\n    \"bodiesIdle\" : ['spriteMonsterBodyIdle_first', 'spriteMonsterBodyIdle_second','spriteMonsterBodyIdle_third'],\n    \"legsIdle\" : ['spriteMonsterLegsIdle_first', 'spriteMonsterLegsIdle_second','spriteMonsterLegsIdle_third'],\n    \"headsFire\" : ['spriteMonsterHeadFire_first', 'spriteMonsterHeadFire_second','spriteMonsterHeadFire_third'],\n    \"bodiesFire\" : ['spriteMonsterBodyFire_first', 'spriteMonsterBodyFire_second','spriteMonsterBodyFire_third'],\n    \"legsFire\" : ['spriteMonsterLegsFire_first', 'spriteMonsterLegsFire_second','spriteMonsterLegsFire_third'],\n    \"headsHurt\" : ['spriteMonsterHeadHurt_first', 'spriteMonsterHeadHurt_second','spriteMonsterHeadHurt_third'],\n    \"bodiesHurt\" : ['spriteMonsterBodyHurt_first', 'spriteMonsterBodyHurt_second','spriteMonsterBodyHurt_third'],\n    \"legsHurt\" : ['spriteMonsterLegsHurt_first', 'spriteMonsterLegsHurt_second','spriteMonsterLegsHurt_third'],\n    \"headsDie\" : ['spriteMonsterHeadDie_first', 'spriteMonsterHeadDie_second','spriteMonsterHeadDie_third'],\n    \"bodiesDie\" : ['spriteMonsterBodyDie_first', 'spriteMonsterBodyDie_second','spriteMonsterBodyDie_third'],\n    \"legsDie\" : ['spriteMonsterLegsDie_first', 'spriteMonsterLegsDie_second','spriteMonsterLegsDie_third'],\n\n    \"firstNames\" : [\"Kazimir\", \"Voiclah\", \"Magamed\", \"Ludovik\", \"Genrich\", \"Sigizmund\", \"Aslanbek\", \"Bzdashek\"],\n    \"secondNames\" : [\"\\\"Hriply\\\"\", \"\\\"Shavka\\\"\", \"\\\"Bambula\\\"\", \"\\\"Baklan\\\"\", \"\\\"Brodyaga\\\"\", \"\\\"Vertuhai\\\"\"],\n    \"thirdNames\" : [\"Vonuchkin\", \"Svininsky\", \"Zhirnidze\", \"Kakulko\", \"Soplivkin\", \"Gryaznulenko\", \"Potnyakovich\"],\n\n    \"backgroundImages\" : ['arena1', 'arena2', 'arena3', 'arena4']\n};\n\nexport const dictTranslateTask = {\n    \"dog\" : [\"собака\", \"пес\", \"пёс\"],\n    \"cat\" : [\"кот\", \"кошка\", \"котэ\"],\n    \"house\" : [\"дом\"],\n    \"spell\" : [\"заклинание\", \"чары\"],\n    \"pig\" : [\"свинья\", \"поросенок\", \"поросёнок\", \"хрюшка\"],\n    \"bird\" : [\"птица\"],\n    \"towel\" : [\"полотенце\"],\n    \"table\" : [\"стол\", \"таблица\"],\n    \"flower\" : [\"цветок\", \"цвет\"]\n};\n\nexport const dictListeningTask = {\n    \"audio/listeningTask/elephant.mp3\" : \"elephant\",\n    \"audio/listeningTask/forest.mp3\" : \"forest\",\n    \"audio/listeningTask/mushroom.mp3\" : \"mushroom\",\n    \"audio/listeningTask/ocean.mp3\" : \"ocean\",\n    \"audio/listeningTask/rainbow.mp3\" : \"rainbow\",\n    \"audio/listeningTask/strawberry.mp3\" : \"strawberry\",\n    \"audio/listeningTask/tomato.mp3\" : \"tomato\"\n};\n\nexport const dictCapitalsTask = {\n    \"img/capitalsTask/spain.jpg\" : [\"madrid\"],\n    \"img/capitalsTask/belarus.jpeg\" : [\"minsk\"],\n    \"img/capitalsTask/canada.jpg\" : [\"ottawa\", \"ottava\"],\n    \"img/capitalsTask/germany.jpg\" : [\"berlin\"],\n    \"img/capitalsTask/greatBritain.jpg\" : [\"london\"],\n    \"img/capitalsTask/italy.jpg\" : [\"rome\", \"rim\"],\n    \"img/capitalsTask/lithuania.jpg\" : [\"vilnius\", \"vilnus\"],\n    \"img/capitalsTask/sweden.jpg\" : [\"stockholm\", \"stokholm\", \"stokgolm\"],\n    \"img/capitalsTask/usa.png\" : [\"washington\"]\n};\n\nexport const dictSortTask = {\n    \"wolf\" : [\"wolf\", \"flow\"],\n    \"bisycle\" : [\"bisycle\"],\n    \"clothes\" : [\"clothes\"],\n    \"apple\" : [\"apple\"],\n    \"violet\" : [\"violet\"],\n    \"coffee\" : [\"coffee\"],\n    \"market\" : [\"market\"],\n    \"mirror\" : [\"mirror\"],\n    \"rabbit\" : [\"rabbit\"]\n};\n\nexport const dictRedundantTask = {\n    \"img/capitalsTask/canada.jpg\" : [\"img/capitalsTask/canada.jpg\", \"img/capitalsTask/spain.jpg\", \"img/capitalsTask/italy.jpg\"]\n}\n","import Player from \"./player\";\nimport Monster from \"./monster\";\nimport Spell from \"./spell\";\nimport mylib from \"./mylib\";\nimport {dictMonster} from \"./dict\";\n\nclass Game{\n    constructor(){\n        this.player;\n        this.monster;\n        this.spell;\n        this.btnChooseSpell;\n    }\n\n    create(){\n        document.querySelector('.regPage').style.display = \"none\";\n        document.querySelector('.gamePage').style.display = \"block\";\n        const playerName = document.querySelector('input').value;\n\n        this.player = new Player(playerName);\n        this.player.drawPlayer();\n\n        this.monster = new Monster(this.player.score);\n        this.monster.drawMonster(this.player);\n\n        this.spell = new Spell();\n        this.btnChooseSpell = this.spell.open.bind(this.spell);\n        btnChooseSpell.addEventListener('click', this.btnChooseSpell);\n        document.querySelector('.spells').addEventListener('click', () => {this.spell.chooseSpell(event)});\n        btnAnswer.addEventListener('click', () => {this.setAnswer()});\n    }\n\n    setAnswer(){\n        if(this.spell.task.type === \"sort\"){\n            this.setSortAnswer();\n        }\n        this.spell.task.answer = document.getElementById('answer').value.toString();\n        document.querySelector('.taskPage').style.display = \"none\";\n        btnChooseSpell.removeEventListener('click', this.btnChooseSpell);\n        this.spell.cast(this.player, this.monster);\n        setTimeout(this.isAlive.bind(this), 2000);\n    }\n\n    setSortAnswer(){\n        const ul = document.querySelector('.sortable');\n        let ans = '';\n        Array.prototype.forEach.call(ul.children, (item) => {ans += item.innerText;});\n        document.getElementById('answer').value = ans;\n        document.getElementById('answer').style.display = \"inline-block\";\n    }\n\n    isAlive(){\n        if(!this.monster.isAlive()){\n            this.monster.die();\n            setTimeout(()=>this.monster.stopDie(), 1999);\n            setTimeout(()=>this.nextMonster(), 2000);\n        }\n        else if(!this.player.isAlive()){\n            this.player.die();\n            setTimeout(()=>this.finish(), 3000);\n        }\n        else{\n            btnChooseSpell.addEventListener('click', this.btnChooseSpell);\n        }\n    }\n\n    nextMonster(){\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove(dictMonster.headsIdle[this.monster.head]);\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesIdle[this.monster.body]);\n        spriteMonster.children[2].classList.remove(dictMonster.legsIdle[this.monster.legs]);\n\n        this.player.score +=1;\n        this.monster = new Monster(this.player.score);\n        this.monster.drawMonster(this.player);\n        this.player.health = Math.min(this.player.health+mylib.getRandomFromTo(10, 15+this.player.score), this.player.startHealth);\n        this.player.drawHealth();\n        btnChooseSpell.addEventListener('click', this.btnChooseSpell);\n    }\n\n    finish(){\n        document.querySelector('.gamePage').style.display = \"none\";\n        document.querySelector('.scoresPage').style.display = \"block\";\n        localStorage.setItem('game' + Date.now(), this.player.name + ',' + (this.player.score));\n        mylib.createHighscoresTable();\n    }\n\n}\n\nexport default Game;","import Game from \"./game.js\";\n\nlet game = new Game();\nlet myGame = game.create.bind(game);\nbtnStart.addEventListener('click', myGame);\n\n/*\nlet audio = new Audio();\naudio.volume = 0.1;\naudio.src = './audio/soundtrack.mp3';\naudio.autoplay = true;\naudio.loop = true;\n\n\n*/\n","import mylib from \"./mylib\";\nimport {dictMonster} from \"./dict\";\n\nclass Monster{\n    constructor(score){\n        this.score = score;\n        this.name = Monster.generateName();\n        this.startHealth = Monster.generateHealth(this.score);\n        this.health = this.startHealth;\n        this.head;\n        this.body;\n        this.legs;\n        this.audioFire = new Audio();\n        this.audioGrenadePin = new Audio();\n        this.audioGrenade = new Audio();\n    }\n\n    drawMonster(){\n        document.querySelector('.monsterName').innerHTML = this.name;\n        document.querySelector('.round').innerHTML = \"round \" + (this.score+1);\n        this.drawHealth();\n        this.createSounds();\n\n        /*add new background and clear the previous*/\n        document.querySelector('.gamePage').classList.add(dictMonster.backgroundImages[this.score % dictMonster.backgroundImages.length]);\n        document.querySelector('.gamePage').classList.remove(dictMonster.backgroundImages[(this.score-1) % dictMonster.backgroundImages.length]);\n\n        /*get random numbers to take head, body, legs from dictionary by these numbers */\n        this.head = mylib.getRandomFromTo(0, dictMonster.headsIdle.length-1);\n        this.body = mylib.getRandomFromTo(0, dictMonster.bodiesIdle.length-1);\n        this.legs = mylib.getRandomFromTo(0, dictMonster.legsIdle.length-1);\n\n        /*draw the monster from taken head, body and legs*/\n        document.querySelector('.spriteMonsterHeadIdle').classList.add(dictMonster.headsIdle[this.head]);\n        document.querySelector('.spriteMonsterBodyIdle').classList.add(dictMonster.bodiesIdle[this.body]);\n        document.querySelector('.spriteMonsterLegsIdle').classList.add(dictMonster.legsIdle[this.legs]);\n    }\n\n    /*sets the green line of health and puts a number of health in html*/\n    drawHealth(){\n        document.querySelector('.monsterHealthRemain').style.width = this.health/this.startHealth*100 + \"%\";\n        document.querySelector('.monsterHealthRemain').innerHTML = this.health;\n    }\n\n    createSounds(){\n        this.audioFire.preload = 'auto';\n        this.audioFire.volume = 1;\n        this.audioFire.src = './audio/monsterFire.mp3';\n        this.audioGrenade.preload = 'auto';\n        this.audioGrenade.volume = 1;\n        this.audioGrenade.src = './audio/grenade.mp3';\n        this.audioGrenadePin.preload = 'auto';\n        this.audioGrenadePin.volume = 1;\n        this.audioGrenadePin.src = './audio/grenade0.mp3';\n    }\n\n    /*removes classes of idle parts of the monster and sets classes of fire parts of the monster*/\n    fire(){\n        this.audioFire.play();\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.remove(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.remove(dictMonster.legsIdle[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadFire');\n        spriteMonster.children[0].classList.add(dictMonster.headsFire[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyFire');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesFire[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsFire');\n        spriteMonster.children[2].classList.add(dictMonster.legsFire[this.legs]);\n\n    }\n\n    /*removes classes of fire parts of the monster and sets classes of idle parts of the monster*/\n    stopFire(){\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadFire');\n        spriteMonster.children[0].classList.remove(dictMonster.headsFire[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyFire');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesFire[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsFire');\n        spriteMonster.children[2].classList.remove(dictMonster.legsFire[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.add(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.add(dictMonster.legsIdle[this.legs]);\n    }\n\n    /*removes classes of idle parts of the monster and sets classes of hurt parts of the monster*/\n    hurt(){\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.remove(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.remove(dictMonster.legsIdle[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadHurt');\n        spriteMonster.children[0].classList.add(dictMonster.headsHurt[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyHurt');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesHurt[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsHurt');\n        spriteMonster.children[2].classList.add(dictMonster.legsHurt[this.legs]);\n    }\n\n    /*removes classes of hurt parts of the monster and sets classes of idle parts of the monster*/\n    stopHurt(){\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadHurt');\n        spriteMonster.children[0].classList.remove(dictMonster.headsHurt[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyHurt');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesHurt[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsHurt');\n        spriteMonster.children[2].classList.remove(dictMonster.legsHurt[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.add(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.add(dictMonster.legsIdle[this.legs]);\n    }\n\n    die(){\n        setTimeout(()=>{this.audioGrenadePin.play()}, 130);\n        setTimeout(()=>{this.audioGrenade.play()}, 400);\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.remove(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.remove(dictMonster.legsIdle[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadDie');\n        spriteMonster.children[0].classList.add(dictMonster.headsDie[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyDie');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesDie[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsDie');\n        spriteMonster.children[2].classList.add(dictMonster.legsDie[this.legs]);\n    }\n\n    stopDie(){\n        const spriteMonster = document.querySelector('.spriteMonster');\n        spriteMonster.children[0].classList.remove('spriteMonsterHeadDie');\n        spriteMonster.children[0].classList.remove(dictMonster.headsDie[this.head]);\n        spriteMonster.children[1].classList.remove('spriteMonsterBodyDie');\n        spriteMonster.children[1].classList.remove(dictMonster.bodiesDie[this.body]);\n        spriteMonster.children[2].classList.remove('spriteMonsterLegsDie');\n        spriteMonster.children[2].classList.remove(dictMonster.legsDie[this.legs]);\n        spriteMonster.children[0].classList.add('spriteMonsterHeadIdle');\n        spriteMonster.children[0].classList.add(dictMonster.headsIdle[this.head]);\n        spriteMonster.children[1].classList.add('spriteMonsterBodyIdle');\n        spriteMonster.children[1].classList.add(dictMonster.bodiesIdle[this.body]);\n        spriteMonster.children[2].classList.add('spriteMonsterLegsIdle');\n        spriteMonster.children[2].classList.add(dictMonster.legsIdle[this.legs]);\n    }\n\n\n    /*checks if the monster is alive*/\n    isAlive(){\n        return this.health > 0;\n    }\n\n    /*generates the monster's name from three parts*/\n    static generateName(){\n        const chosenFirstName = mylib.getRandomArrayElement(dictMonster.firstNames);\n        const chosenSecondName = mylib.getRandomArrayElement(dictMonster.secondNames);\n        const chosenThirdName = mylib.getRandomArrayElement(dictMonster.thirdNames);\n        return chosenFirstName + ' ' + chosenSecondName + ' ' + chosenThirdName;\n    }\n\n    /*generates the monster's health depending on the level*/\n    static generateHealth(score){\n        return (30 + score*10 + mylib.getRandomFromTo(0, 10));\n    }\n}\n\nexport default Monster;","class mylib{\n    /*returns a random element of the passed array*/\n    static getRandomArrayElement(array){\n        return array[Math.floor(Math.random() * array.length)];\n    }\n\n    /*returns a random integer from a gap between min and max*/\n    static getRandomFromTo(min, max){\n        return Math.floor(Math.random() * (max - min + 1)) + min;;\n    }\n\n    /*draws a table with highscores*/\n    static createHighscoresTable() {\n        let recordsArray = mylib.getHighscores();\n        let recordsTable = document.querySelector('table');\n        for (let i = 0; i < recordsArray.length; i++) {\n            let tableRow = document.createElement(\"tr\");\n            let playerName = document.createElement(\"td\");\n            let playerScore = document.createElement(\"td\");\n            playerName.innerText = recordsArray[i][0];\n            playerScore.innerText = recordsArray[i][1];\n            tableRow.appendChild(playerName);\n            tableRow.appendChild(playerScore);\n            recordsTable.appendChild(tableRow);\n        }\n    }\n\n    /*returns a sorted array of 10 top scores*/\n    static getHighscores() {\n        let allScores = [];\n        let storageCount = localStorage.length;\n        for (let i = 0; i < storageCount; i++) {\n            if (localStorage.key(i).substr(0, 4) === 'game') {\n                allScores.push(localStorage.getItem(localStorage.key(i)).split(','));\n            }\n        }\n        for (let i = 0; i < allScores.length; i++) {\n            allScores[i][1] = Number(allScores[i][1]);\n        }\n        allScores = mylib.bubbleSort2D(allScores).slice(0, 10);\n        return allScores;\n    }\n\n    /*bubble sort for two-dimensional array*/\n    static bubbleSort2D(array) {\n        let length = array.length;\n        for (let i = 0; i < length - 1; i++) {\n            for (let j = 0; j < length - 1 - i; j++) {\n                if (array[j + 1][1] > array[j][1]) {\n                    let t = array[j + 1];\n                    array[j + 1] = array[j];\n                    array[j] = t;\n                }\n            }\n        }\n        return array;\n    }\n\n    /*shuffles elements in array*/\n    static shuffle(array) {\n        let currentIndex = array.length;\n        let tempValue;\n        let randIndex;\n        while (0 !== currentIndex) {\n            randIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            tempValue = array[currentIndex];\n            array[currentIndex] = array[randIndex];\n            array[randIndex] = tempValue;\n        }\n        return array;\n    }\n\n}\n\nexport default mylib;","class Player{\n    constructor(name){\n        this.name = name;\n        this.startHealth = 100;\n        this.health = this.startHealth;\n        this.score = 0;\n        this.audioFire = new Audio();\n        this.audioHeal = new Audio();\n    }\n\n    drawPlayer(){\n        document.querySelector('.playerName').innerHTML = this.name;\n        this.drawHealth();\n        this.createSounds();\n    }\n\n    drawHealth(){\n        document.querySelector('.playerHealthRemain').style.width = this.health/this.startHealth*100 + \"%\";\n        document.querySelector('.playerHealthRemain').innerHTML = this.health;\n    }\n\n    createSounds(){\n        this.audioFire.preload = 'auto';\n        this.audioFire.volume = 1;\n        this.audioFire.src = './audio/playerFire.mp3';\n        this.audioHeal.preload = 'auto';\n        this.audioHeal.volume = 1;\n        this.audioHeal.src = './audio/playerHeal.mp3';\n    }\n\n    fire(){\n        this.audioFire.play();\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerIdle');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerFire');\n    }\n\n    stopFire(){\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerFire');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerIdle');\n    }\n\n    healing(){\n        this.audioHeal.play();\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerIdle');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerHeal');\n    }\n\n    stopHealing(){\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerHeal');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerIdle');\n    }\n\n    hurt(){\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerIdle');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerHurt');\n    }\n\n    stopHurt(){\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerHurt');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerIdle');\n    }\n\n    die(){\n        document.querySelector('.spritePlayer').classList.remove('spritePlayerIdle');\n        document.querySelector('.spritePlayer').classList.add('spritePlayerDie');\n    }\n\n    isAlive(){\n        return this.health > 0;\n    }\n\n\n}\n\nexport default Player;","import Task from \"./task\";\nimport mylib from \"./mylib\";\n\nclass Spell{\n    constructor(){\n        this.kind;\n        this.task;\n    }\n\n    /*opens window with choise of spell type*/\n    open(){\n        document.querySelector('.spellPage').style.display = \"block\";\n    }\n\n    /*sets the chosen spell type into object's property and creates a task*/\n    chooseSpell(event){\n        this.kind = event.target.getAttribute('id');\n        document.querySelector('.spellPage').style.display = \"none\";\n        document.querySelector('.taskPage').style.display = \"block\";\n        this.task = new Task();\n        this.task.generate();\n    }\n\n    /*if the chosen type of spell was \"atack\", the player atacks the monster or the monster atacks the player */\n    atack(atacking, atacked){\n        atacked.health = Math.max(atacked.health - mylib.getRandomFromTo(20, 25+atacked.score), 0);\n        atacked.drawHealth();\n        atacking.fire();\n        atacked.hurt();\n        setTimeout(atacking.stopFire.bind(atacking), 2000);\n        setTimeout(atacked.stopHurt.bind(atacked), 2000);\n    }\n\n    /*if the chosen type of spell was \"heal\" the player healing himself*/\n    heal(player){\n        player.health = Math.min(player.health+mylib.getRandomFromTo(20, 25+player.score*5), player.startHealth);\n        player.drawHealth();\n        player.healing();\n        setTimeout(player.stopHealing, 2000);\n    }\n\n    cast(player, monster){\n        switch (this.kind){\n            case 'atackSpell':\n                this.task.isSolved() ? this.atack(player, monster) : this.atack(monster, player);\n                break;\n            case 'healSpell':\n                this.task.isSolved() ? this.heal(player) : this.atack(monster, player);\n                break;\n            default:\n                null;\n        }\n\n    }\n}\n\nexport default Spell;","import mylib from \"./mylib\";\nimport {dictTranslateTask, dictListeningTask, dictCapitalsTask, dictSortTask, dictRedundantTask} from \"./dict\";\n\nclass Task{\n    constructor(){\n        this.type;\n        this.condition;\n        this.solution = [];\n        this.answer;\n    }\n\n    generate(){\n        document.getElementById('tempMedia').innerHTML = '';\n        document.getElementById('answer').value = '';\n        const tasks = [this.arithmetics, this.translate, this.listening, this.capitals, this.sort];\n        const currentTask = mylib.getRandomArrayElement(tasks).bind(this);\n        currentTask();\n\n    }\n\n    arithmetics(){\n        this.type = \"arithmetics\";\n        const firstNumber = mylib.getRandomFromTo(0, 100);\n        const secondNumber = mylib.getRandomFromTo(0, 100);\n        const operations = ['+', '-', '*', '/'];\n        const operation = mylib.getRandomArrayElement(operations);\n        this.condition = firstNumber + operation + secondNumber;\n        this.solution.push(eval(this.condition).toString());\n        document.querySelector('.taskDescription').innerHTML = \"solve the task:<br>\" + this.condition;\n    }\n\n    translate(){\n        this.type = \"translate\";\n        const arrayOfWords = Object.keys(dictTranslateTask);\n        const arrayOfWordsLength = arrayOfWords.length;\n        this.condition = arrayOfWords[mylib.getRandomFromTo(0, arrayOfWordsLength-1)];\n        this.solution = dictTranslateTask[this.condition];\n\n        document.querySelector('.taskDescription').innerHTML = \"translate into russian:<br>\" + this.condition;\n    }\n\n    listening(){\n        this.type = \"listening\";\n        const arrayOfWords = Object.keys(dictListeningTask);\n        const arrayOfWordsLength = arrayOfWords.length;\n        this.condition = arrayOfWords[mylib.getRandomFromTo(0, arrayOfWordsLength-1)];\n        this.solution.push(dictListeningTask[this.condition]);\n\n        const insertingAudio = document.createElement(\"audio\");\n        insertingAudio.setAttribute(\"src\", this.condition);\n        insertingAudio.setAttribute(\"controls\", \"\");\n        document.getElementById('tempMedia').appendChild(insertingAudio);\n        document.querySelector('.taskDescription').innerHTML = \"type the word you heard\";\n    }\n\n    capitals(){\n        this.type = \"capitals\";\n        const arrayOfWords = Object.keys(dictCapitalsTask);\n        const arrayOfWordsLength = arrayOfWords.length;\n        this.condition = arrayOfWords[mylib.getRandomFromTo(0, arrayOfWordsLength-1)];\n        this.solution = dictCapitalsTask[this.condition];\n\n        const insertingFlag = document.createElement(\"img\");\n        insertingFlag.setAttribute(\"src\", this.condition);\n        document.getElementById('tempMedia').appendChild(insertingFlag);\n        document.querySelector('.taskDescription').innerHTML = \"what is the capital of:\";\n    }\n\n    sort(){\n        this.type = \"sort\";\n        document.getElementById('answer').style.display = \"none\";\n\n        const arrayOfWords = Object.keys(dictSortTask);\n        const arrayOfWordsLength = arrayOfWords.length;\n        this.condition = arrayOfWords[mylib.getRandomFromTo(0, arrayOfWordsLength-1)];\n        this.solution = dictSortTask[this.condition];\n\n        const chosenWordShuffledArr = mylib.shuffle(this.condition.split(\"\"));\n\n        const ul = document.createElement(\"ul\");\n        ul.classList.add(\"sortable\");\n\n        for(let i=0;i<chosenWordShuffledArr.length;i++){\n            const li = document.createElement(\"li\");\n            li.innerHTML = chosenWordShuffledArr[i];\n            ul.appendChild(li);\n        }\n\n        document.getElementById('tempMedia').appendChild(ul);\n\n        $( function() {\n            $(\".sortable\").sortable().disableSelection();\n        } );\n\n        document.querySelector('.taskDescription').innerHTML = \"put the letters in the correct order:\";\n    }\n\n    redundant(){\n        this.type = \"redundant\";\n        document.getElementById('answer').style.display = \"none\";\n\n        const arrayOfWords = Object.keys(dictRedundantTask);\n        const arrayOfWordsLength = arrayOfWords.length;\n        this.solution.push(arrayOfWords[mylib.getRandomFromTo(0, arrayOfWordsLength-1)]);\n        this.condition = dictRedundantTask[this.solution];\n\n        const media = document.getElementById('tempMedia');\n        for(let i = 0; i < 3; i++){\n            const label = document.createElement(\"label\");\n            const input = document.createElement(\"input\");\n            input.setAttribute(\"type\", \"radio\");\n            input.setAttribute(\"name\", \"redundantPic\")\n            input.setAttribute(\"value\", i.toString());\n            const img = document.createElement(\"img\");\n            img.setAttribute(\"src\", this.condition[i]);\n            label.appendChild(input);\n            label.appendChild(img);\n            media.appendChild(label);\n        }\n\n        document.querySelector('.taskDescription').innerHTML = \"choose the redundant picture:\";\n    }\n\n\n\n    isSolved(){\n        return this.solution.indexOf(this.answer.toLowerCase()) > -1;\n    }\n\n}\n\nexport default Task;"],"sourceRoot":""}